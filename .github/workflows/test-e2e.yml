name: ocelot.social test-e2e ⇌⋇⟴

on:
  push:
    paths:
      - 'backend/**'
      - 'webapp/**'
      - 'neo4j/**'
      - '**/package.json'
      - 'cypress/**'
      - '.github/workflows/test-e2e.yml'
      - 'docker-compose*.yml'
  workflow_dispatch:

jobs:
  determine-install-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: set
        shell: bash
        run: |
          modules=$(find . -name package.json | grep -v node_modules | sed 's|/package.json||' | sed 's|^./||')
          limited=$(echo "$modules" | head -n 8 | jq -R . | jq -s -c '.')
          echo "Install matrix: $limited"
          echo "matrix=$limited" >> "$GITHUB_OUTPUT"

  prepare-install:
    runs-on: ubuntu-latest
    needs: determine-install-matrix
    strategy:
      fail-fast: false
      matrix:
        module: ${{ fromJson(needs.determine-install-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - name: Install ${{ matrix.module }} dependencies
        working-directory: ${{ matrix.module }}
        run: yarn install
      - name: Fix vite (if frontend)
        if: matrix.module == 'frontend'
        working-directory: frontend
        run: yarn add vite
      - name: Verify Cypress (if webapp)
        if: matrix.module == 'webapp'
        run: npx cypress verify
      - name: Cache Cypress (if webapp)
        if: matrix.module == 'webapp'
        uses: actions/cache@v4
        with:
          path: ~/.cache/Cypress
          key: cypress-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

  determine-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Create dynamic test matrix
        id: set
        shell: bash
        run: |
          generate_matrix() {
            local count=$(find cypress/e2e -name "*.feature" | wc -l)
            local max=8
            local actual=$(( count < max ? count : max ))
            seq 1 "$actual" | jq -R . | jq -s -c '.'
          }
          matrix=$(generate_matrix)
          echo "Generated Matrix: $matrix"
          echo "matrix=$matrix" >> "$GITHUB_OUTPUT"

  build-webapp:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build webapp image
        run: |
          docker build -t ocelot/webapp:test -f webapp/Dockerfile webapp
          docker save ocelot/webapp:test -o /tmp/webapp.tar
      - uses: actions/upload-artifact@v4
        with:
          name: webapp-image
          path: /tmp/webapp.tar

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build backend image
        run: |
          docker build -t ocelot/backend:test -f backend/Dockerfile backend
          docker save ocelot/backend:test -o /tmp/backend.tar
      - uses: actions/upload-artifact@v4
        with:
          name: backend-image
          path: /tmp/backend.tar

  build-neo4j:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build neo4j image
        run: |
          docker build -t ocelot/neo4j:test -f neo4j/Dockerfile neo4j
          docker save ocelot/neo4j:test -o /tmp/neo4j.tar
      - uses: actions/upload-artifact@v4
        with:
          name: neo4j-image
          path: /tmp/neo4j.tar

  test:
    name: e2e-${{ matrix.job }}
    runs-on: ubuntu-latest
    needs: [prepare-install, determine-matrix, build-webapp, build-backend, build-neo4j]
    strategy:
      fail-fast: false
      matrix:
        job: ${{ fromJson(needs.determine-matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: webapp-image
          path: /tmp
      - uses: actions/download-artifact@v4
        with:
          name: backend-image
          path: /tmp
      - uses: actions/download-artifact@v4
        with:
          name: neo4j-image
          path: /tmp
      - run: |
          docker load -i /tmp/webapp.tar
          docker load -i /tmp/backend.tar
          docker load -i /tmp/neo4j.tar
      - name: Start services
        run: |
          docker network create ocelot || true
          docker run -d --rm --net ocelot --name webapp -p 3000:3000 ocelot/webapp:test
          docker run -d --rm --net ocelot --name backend ocelot/backend:test
          docker run -d --rm --net ocelot --name neo4j ocelot/neo4j:test
      - name: Run Cypress tests
        run: |
          echo "Running tests for group ${{ matrix.job }}..."
          yarn run cypress:run --env group=${{ matrix.job }}
